var documenterSearchIndex = {"docs":
[{"location":"#JLACovarianceMatrix-Documentation","page":"JLACovarianceMatrix","title":"JLACovarianceMatrix Documentation","text":"","category":"section"},{"location":"","page":"JLACovarianceMatrix","title":"JLACovarianceMatrix","text":"JLACovarianceMatrix.jl","category":"page"},{"location":"","page":"JLACovarianceMatrix","title":"JLACovarianceMatrix","text":"Create JLA-like covariance matrices from a .toml file. Just provide ZP and Filter uncertainties, alongside (optional) supercal corrections. ","category":"page"},{"location":"#Install","page":"JLACovarianceMatrix","title":"Install","text":"","category":"section"},{"location":"","page":"JLACovarianceMatrix","title":"JLACovarianceMatrix","text":"using Pkg\nPkg.add(\"JLACovarianceMatrix\")","category":"page"},{"location":"#Usage","page":"JLACovarianceMatrix","title":"Usage","text":"","category":"section"},{"location":"","page":"JLACovarianceMatrix","title":"JLACovarianceMatrix","text":"Create a new covariance matrix by providing the various uncertainties that make up the total uncertainty budget. Note that the toml keys are case-insensitive, and you can use any of the advanced features detailed in the advanced page of BetterInputFiles.jl. The following is an example of creating a covariance matrix for the DES, SNLS, and SDSS instruments.","category":"page"},{"location":"","page":"JLACovarianceMatrix","title":"JLACovarianceMatrix","text":"[ CovarianceMatrix ]\n\n    [ CovarianceMatrix.Instrument.DES ]\n        Astrometry = 0.001\n        NonLinearity = 0.001\n        PhotometricZeroPointing = 0.002\n        PhotometricBias = 0.003\n        Uniformity = 0.00381 # 0.0066 / âˆš3\n        Filters =               [\"g\",   \"r\",    \"i\",    \"z\"]\n        ABUncertainty =         [0.002, 0.002,  0.001,  0.005]\n        SuperCalCorrection =    [0.0,   0.0,    0.0,    0.0]\n        FilterUncertainty =     [0.6,   0.6,    0.6,    0.6]\n        CentralWavelength =     [481,   644,    781,    913]\n\n    [ CovarianceMatrix.Instrument.SNLS ]\n        Filters =               [\"g\",   \"r\",    \"i\",    \"z\"]\n        ZPUncertainty =         [0.002, 0.002,  0.002,  0.002]\n        SuperCalCorrection =    [0.007, -0.001, -0.006, 0.002] \n        FilterUncertainty =     [0.3,   1.0,    3.1,    0.6]\n        CentralWavelength =     [475,   640,    766,    925]\n\n    [ CovarianceMatrix.Instrument.SDSS ]\n        Filters =               [\"u\",   \"g\",    \"r\",    \"i\",    \"z\"]\n        ZPUncertainty =         [0.023, 0.002,  0.002,  0.002,  0.002]\n        SuperCalCorrection =    [0.0,   -0.003, 0.004,  0.001,  -0.008]\n        FilterUncertainty =     [0.7,   0.6,    0.6,    0.6,    0.6]\n        CentralWavelength =     [355,   487,    617,    748,    893]","category":"page"},{"location":"","page":"JLACovarianceMatrix","title":"JLACovarianceMatrix","text":"FilterUncertainty and CentralWavelength are assumed to be in nm, and ABUncertainty, ZPUncertainty, and SuperCalCorrection are assumed to be in mag. This will produce a CovarianceMatrix object, and save it in a .jld2 file.","category":"page"},{"location":"#Analysis","page":"JLACovarianceMatrix","title":"Analysis","text":"","category":"section"},{"location":"","page":"JLACovarianceMatrix","title":"JLACovarianceMatrix","text":"You can also do some basic analysis, such as plotting and drawing random offsets from the covariance matrix. The latter is particularly useful when combined with SALTJacobian.jl, allowing the creation of arbitrary, covariantly random SALT surfaces. ","category":"page"},{"location":"","page":"JLACovarianceMatrix","title":"JLACovarianceMatrix","text":"[ CovarianceMatrix ]\n    input = \"../Outputs/DES/DES.jld2\" # Import premade covariance matrix\n\n[[ Analaysis ]]\n    output = \"Plots\" # Will create a new directory inside global / output_path\n    [ Analysis.plot ]\n        # Plot options go here\n\n[[ Analysis ]]\n    output = \"Draw\"\n    [ Analysis.draw ]\n        num = 100 # Draw 100 random offsets\n        SALTJacobian = \"trainopts.toml \"# Poduce a `.toml` file which can be included in a SALTJacobian.jl run","category":"page"},{"location":"","page":"JLACovarianceMatrix","title":"JLACovarianceMatrix","text":"If SALTJacobian is not specified, then the drawn offsets will simply be logged. ","category":"page"}]
}
